name: CI

on: [workflow_call, workflow_dispatch]

env:
  MAIN_REPOSITORY_ORIGIN: 'u-ways/software-engineering-work-experience'

permissions:
  statuses: write
  checks: write
  contents: write
  pull-requests: write
  actions: write

jobs:
  Test-Runner:
    runs-on: ubuntu-22.04
    outputs:
      inverse_matcher: ${{ steps.set_inverse_matcher.outputs.inverse_matcher }}
    steps:
      - name: 'Checkout to current branch'
        uses: actions/checkout@v3
      - name: 'Set up JDK 17'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: liberica
          cache: gradle
      - name: 'Cache Gradle packages'
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: 'Cache compiled classes'
        uses: actions/cache@v3
        with:
          path: ./build/classes
          key: ${{ runner.os }}-classes-${{ hashFiles('**/*.kt') }}
          restore-keys: ${{ runner.os }}-classes
      - name: 'Setting Challenge Solution Checker Context'
        id: set_inverse_matcher
        run: echo "inverse_matcher=${{ github.repository == env.MAIN_REPOSITORY_ORIGIN && 'true' || 'false' }}" >> $GITHUB_OUTPUT
      - name: 'Compile Project Sourcecode'
        run: make compile

  Challenges:
    needs: Test-Runner
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        challenge: [1, 2, 3, 4, 5]
    steps:
      - name: 'Checkout to current branch'
        uses: actions/checkout@v3
      - name: 'Set up JDK 17'
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: liberica
          cache: gradle
      # NOTE: key and restore-keys must match Test-Runner cache configs
      - name: 'Restore cached Gradle packages'
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle
      # NOTE: key and restore-keys must match Test-Runner cache configs
      - name: 'Restore cached compiled classes'
        uses: actions/cache@v3
        with:
          path: ./build/classes
          key: ${{ runner.os }}-classes-${{ hashFiles('**/*.kt') }}
          restore-keys: ${{ runner.os }}-classes
      - name: 'Checking Challenge Number ${{ matrix.challenge }} Results'
        run: make INVERSE_MATCHER="${{ needs.Test-Runner.outputs.inverse_matcher }}" test-challenge-${{ matrix.challenge }}
      - name: 'Uploading test artifacts'
        if: success() || failure()
        uses: actions/upload-artifact@v3
        with:
          # NOTE:
          #    With upload-artifact actions, the root directory you upload will be replaced with the
          #    name set (i.e. "test-artifacts") by default. This means on download, you should reference
          #    the files like so: `./test-artifacts/path/to/file`
          name: test-artifacts
          path: |
            ./build/test-results/challenge-${{ matrix.challenge }}/test/*.xml
            ./build/reports/challenge-${{ matrix.challenge }}
            ./build/reports/jacoco/test/jacocoTestReport.xml/challenge-${{ matrix.challenge }}.xml

  Test-Reporter:
    needs: Challenges
    if: success() || failure()
    runs-on: ubuntu-22.04
    steps:
      - name: 'Checkout to current branch'
        uses: actions/checkout@v3
      - name: 'Downloading all artifacts'
        uses: actions/download-artifact@v3
        with:
          name: test-artifacts
          path: ./test-artifacts
      - name: 'Generating test report for Github actions'
        uses: dorny/test-reporter@v1.6.0
        with:
          name: 'Test Report: JUnit'
          path: ./test-artifacts/test-results/challenge-*/test/*.xml
          reporter: java-junit
      - name: 'Uploading test coverage results to CodeClimate'
        uses: paambaati/codeclimate-action@v5.0.0
        # NOTE:
        #   Only upload coverage results for the main repository
        if: ${{ github.repository == env.MAIN_REPOSITORY_ORIGIN }}
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
          JACOCO_SOURCE_PATH: "${{ github.workspace }}/src/main/kotlin"
        with:
          # NOTE:
          #   Paambaati's CodeClimate plugin has poor error reporting, so expect misleading
          #   error logs when you supplement the wrong "coverageLocations" value.
          coverageLocations: ${{ github.workspace }}/test-artifacts/reports/jacoco/test/jacocoTestReport.xml/challenge-*.xml:jacoco